// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using entities.Context;

namespace entities.Migrations
{
    [DbContext(typeof(EvilAmazonDbContext))]
    [Migration("20220121204057_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsGift")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SubtotalPrice")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("entities.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid>("ProductCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            DateAdded = new DateTime(2022, 1, 21, 21, 40, 56, 472, DateTimeKind.Local).AddTicks(1437),
                            ImageUrl = "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1597763166-41CRnvYqmqL.jpg?crop=1xw:1.00xh;center,top&resize=480:*",
                            Info = "Makes weird noises at 3 AM and freaks you out",
                            Name = "Alexa",
                            Price = 49.99m,
                            ProductCode = new Guid("6d74cfa0-8b54-43ce-a14a-2ebd0b7f27ef"),
                            ProductTypeId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            DateAdded = new DateTime(2022, 1, 21, 21, 40, 56, 476, DateTimeKind.Local).AddTicks(8232),
                            ImageUrl = "https://m.media-amazon.com/images/I/61ii0vPLUlL.jpg",
                            Info = "Boost your ego and hate men",
                            Name = "Female Bestseller",
                            Price = 24.99m,
                            ProductCode = new Guid("3669bde0-3478-442d-bafe-87cbd426baaa"),
                            ProductTypeId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            DateAdded = new DateTime(2022, 1, 21, 21, 40, 56, 476, DateTimeKind.Local).AddTicks(8340),
                            ImageUrl = "https://i.cdn.nrholding.net/60147363/550/550",
                            Info = "Become real Slavic patriot",
                            Name = "Wool socks",
                            Price = 5.69m,
                            ProductCode = new Guid("43fb54d8-cf5c-4681-9730-f08ea922ab46"),
                            ProductTypeId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            DateAdded = new DateTime(2022, 1, 21, 21, 40, 56, 476, DateTimeKind.Local).AddTicks(8379),
                            ImageUrl = "https://m.media-amazon.com/images/I/810dKPjq26L._AC_UL1500_.jpg",
                            Info = "Not stolen, I swear on my grandfather's grave",
                            Name = "Golden necklace",
                            Price = 199.99m,
                            ProductCode = new Guid("41d4036d-6ac9-4f11-94c3-ad61395be811"),
                            ProductTypeId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            DateAdded = new DateTime(2022, 1, 21, 21, 40, 56, 476, DateTimeKind.Local).AddTicks(8414),
                            ImageUrl = "https://m.media-amazon.com/images/I/91Qr228LQZL._SL1500_.jpg",
                            Info = "Look like a dork who takes pickup-basketball too serious",
                            Name = "Lebron's jersey",
                            Price = 59.99m,
                            ProductCode = new Guid("e9324fe6-2e2a-4107-8b93-549962cd6863"),
                            ProductTypeId = 5
                        },
                        new
                        {
                            ProductId = 6,
                            DateAdded = new DateTime(2022, 1, 21, 21, 40, 56, 476, DateTimeKind.Local).AddTicks(8457),
                            ImageUrl = "https://images-na.ssl-images-amazon.com/images/I/91oKKezrg0L.jpg",
                            Info = "Act like you're wiser than your friends",
                            Name = "New Age BS Book",
                            Price = 23.99m,
                            ProductCode = new Guid("07816fd8-a483-4cad-8c5e-c2718c096837"),
                            ProductTypeId = 2
                        });
                });

            modelBuilder.Entity("entities.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            ProductTypeId = 1,
                            TypeName = "Tech"
                        },
                        new
                        {
                            ProductTypeId = 2,
                            TypeName = "Books"
                        },
                        new
                        {
                            ProductTypeId = 3,
                            TypeName = "Clothes"
                        },
                        new
                        {
                            ProductTypeId = 4,
                            TypeName = "Gadgets"
                        },
                        new
                        {
                            ProductTypeId = 5,
                            TypeName = "Other"
                        });
                });

            modelBuilder.Entity("entities.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("entities.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("entities.Models.Order", b =>
                {
                    b.HasOne("entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("entities.Models.OrderProduct", b =>
                {
                    b.HasOne("entities.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entities.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("entities.Models.Product", b =>
                {
                    b.HasOne("entities.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("entities.Models.UserRole", b =>
                {
                    b.HasOne("entities.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entities.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("entities.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("entities.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("entities.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("entities.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
